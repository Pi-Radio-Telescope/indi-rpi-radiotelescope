#!/bin/bash
# read indiserver values in a loop and send them to a MQTT broker
# 10.11.2021 antrares/HGZ

# usage: ./rt_indi_to_mqtt <DELAY>
# with the optional argument DELAY: waiting time BEFORE each measurement in s

DELAY=1.0

mqtt_host="*****"
mqtt_port="*****"
mqtt_id="*****"
mqtt_topic="*****"

indi_props=(
"Pi Radiotelescope.CONNECTION.CONNECT"
"Pi Radiotelescope.TELESCOPE_TRACK_STATE.TRACK_ON"
"Pi Radiotelescope.TELESCOPE_PARK.PARK"
"Pi Radiotelescope.TELESCOPE_PARK.UNPARK"
"Pi Radiotelescope.GPIO_OUTPUTS.GPIO_OUT0"
"Pi Radiotelescope.MEASUREMENTS.MEASUREMENT0"
"Pi Radiotelescope.INT_TIME.TIME"
"Pi Radiotelescope.HORIZONTAL_EOD_COORD.AZ"
"Pi Radiotelescope.HORIZONTAL_EOD_COORD.ALT"
"Pi Radiotelescope.EQUATORIAL_EOD_COORD.RA"
"Pi Radiotelescope.EQUATORIAL_EOD_COORD.DEC"
"Pi Radiotelescope.TIME_UTC.UTC"
"Pi Radiotelescope.GEOGRAPHIC_COORD.LAT"
"Pi Radiotelescope.GEOGRAPHIC_COORD.LONG"
"Pi Radiotelescope.GEOGRAPHIC_COORD.ELEV"
"Pi Radiotelescope.DRIVER_UPTIME.UPTIME"
"Pi Radiotelescope.TELESCOPE_SLEW_RATE.1x"
"Pi Radiotelescope.TELESCOPE_SLEW_RATE.2x"
"Pi Radiotelescope.TELESCOPE_SLEW_RATE.3x"
"Pi Radiotelescope.TELESCOPE_SLEW_RATE.4x"
"Pi Radiotelescope.TELESCOPE_SLEW_RATE.5x"
"Pi Radiotelescope.SCOPE_STATUS.SCOPE_IDLE"
"Pi Radiotelescope.SCOPE_STATUS.SCOPE_SLEWING"
"Pi Radiotelescope.SCOPE_STATUS.SCOPE_TRACKING"
"Pi Radiotelescope.SCOPE_STATUS.SCOPE_PARKING"
"Pi Radiotelescope.SCOPE_STATUS.SCOPE_PARKED"
"Pi Radiotelescope.AZ_ENC.AZ_ENC_ERR"
"Pi Radiotelescope.EL_ENC.EL_ENC_ERR"
"Pi Radiotelescope.AXIS_ABSOLUTE_TURNS.AZ_AXIS_TURNS"
"Pi Radiotelescope.AXIS_ABSOLUTE_TURNS.ALT_AXIS_TURNS"
"Pi Radiotelescope.MOTOR_STATUS.AZ_MOTOR_SPEED"
"Pi Radiotelescope.MOTOR_STATUS.ALT_MOTOR_SPEED"
"Pi Radiotelescope.MOTOR_CURRENT.AZ_MOTOR_CURRENT"
"Pi Radiotelescope.MOTOR_CURRENT.ALT_MOTOR_CURRENT"
"Pi Radiotelescope.VOLTAGE_MONITOR.VOLTAGE0"
"Pi Radiotelescope.VOLTAGE_MONITOR.VOLTAGE1"
"Pi Radiotelescope.VOLTAGE_MONITOR.VOLTAGE2"
"Pi Radiotelescope.VOLTAGE_MONITOR.VOLTAGE3"
"Pi Radiotelescope.TEMPERATURE_MONITOR.TEMPERATURE0"
"Pi Radiotelescope.TEMPERATURE_MONITOR.TEMPERATURE1"
"Pi Radiotelescope.TEMPERATURE_MONITOR.TEMPERATURE2"
"Pi Radiotelescope.TELESCOPE_ABORT_MOTION.ABORT"
"Weather Watcher.WEATHER_OVERRIDE.OVERRIDE"
"Weather Watcher.WEATHER_STATUS.WEATHER_WIND_SPEED"
"Weather Watcher.WEATHER_STATUS.WEATHER_HUMIDITY"
"Weather Watcher.WEATHER_STATUS.WEATHER_RAIN_HOUR"
"Weather Watcher.WEATHER_STATUS.WEATHER_PRESSURE"
"Weather Watcher.WEATHER_STATUS.WEATHER_TEMPERATURE"
"Weather Watcher.WEATHER_PARAMETERS.WEATHER_WIND_SPEED"
"Weather Watcher.WEATHER_PARAMETERS.WEATHER_HUMIDITY"
"Weather Watcher.WEATHER_PARAMETERS.WEATHER_RAIN_HOUR"
"Weather Watcher.WEATHER_PARAMETERS.WEATHER_PRESSURE"
"Weather Watcher.WEATHER_PARAMETERS.WEATHER_TEMPERATURE"
)

while :
do

sleep $DELAY

indi_msg=$(indi_getprop -t 1 -1 "${indi_props[@]}" 2>/dev/null)

while read line; do
propandvalue=${line#*.}
prop=${propandvalue%%=*}
value=${propandvalue##*=}

case $prop in
	"CONNECTION.CONNECT")
		if [ $value == "On" ]; then
		rt_connection=1
		else
		rt_connection=0
		fi
	;;
	"TELESCOPE_TRACK_STATE.TRACK_ON")
		if [ $value == "On" ]; then
		rt_trackstate=1
		else
		rt_trackstate=0
		fi
	;;
	"TELESCOPE_PARK.PARK")
		if [ $value == "On" ]; then
		parked=true
		fi
		if [ $value == "Off" ]; then
		parked=false
		fi
	;;
	"TELESCOPE_PARK.UNPARK")
		if [ $value == "On" ]; then
		unparked=true
		fi
		if [ $value == "Off" ]; then
		unparked=false
		fi
	;;
	"GPIO_OUTPUTS.GPIO_OUT0")
		if [ $value == "On" ]; then
		rt_gpio0=1
		else
		rt_gpio0=0
		fi
	;;
	"MEASUREMENTS.MEASUREMENT0")
		rt_adc0=$(printf "%1.3f" $value)
	;;
	"INT_TIME.TIME")
		rt_inttime=$value
	;;
	"HORIZONTAL_EOD_COORD.AZ")
		rt_az=$(printf "%3.4f" $value)	#$(echo $value | awk '{ x=strtonum($(NF)); d=int(x); m=int((x-d)*60); s=int(((x-d)*60-m)*60); printf "%3d:%02d:%02d", d, m, s }')
	;;
	"HORIZONTAL_EOD_COORD.ALT")
		rt_alt=$(printf "%2.4f" $value)	#$(echo $value | awk '{ x=strtonum($(NF)); d=int(x); m=sqrt(int((x-d)*60)^2); s=int((sqrt((x-d)^2)*60-m)*60); printf "%+2.0f:%02d:%02d", d, m, s }')
	;;
	"EQUATORIAL_EOD_COORD.RA")
		rt_ra=$(printf "%2.4f" $value)	#$(echo $value | awk '{ x=strtonum($(NF)); h=int(x); m=int((x-h)*60); s=int(((x-h)*60-m)*60) ; printf "%2d:%02d:%02d", h, m, s }')
	;;
	"EQUATORIAL_EOD_COORD.DEC")
		rt_dec=$(printf "%2.4f" $value)	#$(echo $value | awk '{ x=strtonum($(NF)); d=int(x); m=sqrt(int((x-d)*60)^2); s=int((sqrt((x-d)^2)*60-m)*60); printf "%+2.0f:%02d:%02d", d, m, s }')
	;;
	"TIME_UTC.UTC")
		rt_time=${value##* }
		rt_date=${value%% *}
	;;
	"GEOGRAPHIC_COORD.LAT")
		rt_lat=$(echo $value | awk '{ x=strtonum($(NF)); d=int(x); m=sqrt(int((x-d)*60)^2); s=int((sqrt((x-d)^2)*60-m)*60); printf "%+2.0f:%02d:%02d", d, m, s }')
	;;
	"GEOGRAPHIC_COORD.LONG")
		rt_long=$(echo $value | awk '{ x=strtonum($(NF)); d=int(x); m=sqrt(int((x-d)*60)^2); s=int((sqrt((x-d)^2)*60-m)*60); printf "%+3.0f:%02d:%02d", d, m, s }')
	;;
	"GEOGRAPHIC_COORD.ELEV")
		rt_height=$(printf "%1.1f" $value)
	;;
	"DRIVER_UPTIME.UPTIME")
		rt_uptime=$(printf "%1.2f" $value)
	;;
	"TELESCOPE_SLEW_RATE.1x")
		if [ $value == "On" ]; then
		rt_slewrate=1
		fi
	;;
	"TELESCOPE_SLEW_RATE.2x")
		if [ $value == "On" ]; then
		rt_slewrate=2
		fi
	;;
	"TELESCOPE_SLEW_RATE.3x")
		if [ $value == "On" ]; then
		rt_slewrate=3
		fi
	;;
	"TELESCOPE_SLEW_RATE.4x")
		if [ $value == "On" ]; then
		rt_slewrate=4
		fi
	;;
	"TELESCOPE_SLEW_RATE.5x")
		if [ $value == "On" ]; then
		rt_slewrate=5
		fi
	;;
	"SCOPE_STATUS.SCOPE_IDLE")
		if [ $value == "Ok" ]; then
		rt_status="Idle"
		fi
	;;
	"SCOPE_STATUS.SCOPE_SLEWING")
		if [ $value == "Ok" ]; then
		rt_status="Slewing"
		fi
	;;
	"SCOPE_STATUS.SCOPE_TRACKING")
		if [ $value == "Ok" ]; then
		rt_status="Tracking"
		fi
	;;
	"SCOPE_STATUS.SCOPE_PARKING")
		if [ $value == "Ok" ]; then
		rt_status="Parking"
		fi
	;;
	"SCOPE_STATUS.SCOPE_PARKED")
		if [ $value == "Ok" ]; then
		rt_status="Parked"
		fi
	;;
	"AZ_ENC.AZ_ENC_ERR")
		rt_encerraz=$value
	;;
	"EL_ENC.EL_ENC_ERR")
		rt_encerralt=$value
	;;
	"AXIS_ABSOLUTE_TURNS.AZ_AXIS_TURNS")
		rt_turnsaz=$(printf "%1.2f" $value)
	;;
	"AXIS_ABSOLUTE_TURNS.ALT_AXIS_TURNS")
		rt_turnsalt=$(printf "%1.2f" $value)
	;;
	"MOTOR_STATUS.AZ_MOTOR_SPEED")
		rt_mspeedaz=$(printf "%1.0f" $value)
	;;
	"MOTOR_STATUS.ALT_MOTOR_SPEED")
		rt_mspeedalt=$(printf "%1.0f" $value)
	;;
	"MOTOR_CURRENT.AZ_MOTOR_CURRENT")
		rt_mcurrentaz=$(printf "%1.2f" $value)
	;;
	"MOTOR_CURRENT.ALT_MOTOR_CURRENT")
		rt_mcurrentalt=$(printf "%1.2f" $value)
	;;
	"VOLTAGE_MONITOR.VOLTAGE0")
		rt_voltage0=$(printf "%2.2f" $value)
	;;
	"VOLTAGE_MONITOR.VOLTAGE1")
		rt_voltage1=$(printf "%2.2f" $value)
	;;
	"VOLTAGE_MONITOR.VOLTAGE2")
		rt_voltage2=$(printf "%2.2f" $value)
	;;
	"VOLTAGE_MONITOR.VOLTAGE3")
		rt_voltage3=$(printf "%2.2f" $value)
	;;
	"TEMPERATURE_MONITOR.TEMPERATURE0")
		rt_temp0=$(printf "%2.2f" $value)
	;;
	"TEMPERATURE_MONITOR.TEMPERATURE1")
		rt_temp1=$(printf "%2.2f" $value)
	;;
	"TEMPERATURE_MONITOR.TEMPERATURE2")
		rt_temp2=$(printf "%2.2f" $value)
	;;
	"TELESCOPE_ABORT_MOTION.ABORT")
		if [ $value == "On" ]; then
		rt_abort=1
		else
		rt_abort=0
		fi
	;;
	"WEATHER_OVERRIDE.OVERRIDE")
		if [ $value == "On" ]; then
		weather_override=1
		else
		weather_override=0
		fi
	;;
	"WEATHER_STATUS.WEATHER_WIND_SPEED")
		case $value in
			"Ok") weather_windstatus=0 ;;
			"Busy") weather_windstatus=1 ;;
			"Alert") weather_windstatus=2 ;;
		esac
	;;
	"WEATHER_STATUS.WEATHER_HUMIDITY")
		case $value in
			"Ok") weather_humstatus=0 ;;
			"Busy") weather_humstatus=1 ;;
			"Alert") weather_humstatus=2 ;;
		esac
	;;
	"WEATHER_STATUS.WEATHER_RAIN_HOUR")
		case $value in
			"Ok") weather_rainstatus=0 ;;
			"Busy") weather_rainstatus=1 ;;
			"Alert") weather_rainstatus=2 ;;
		esac
	;;
	"WEATHER_STATUS.WEATHER_PRESSURE")
		case $value in
			"Ok") weather_pressstatus=0 ;;
			"Busy") weather_pressstatus=1 ;;
			"Alert") weather_pressstatus=2 ;;
		esac
	;;
	"WEATHER_STATUS.WEATHER_TEMPERATURE")
		case $value in
			"Ok") weather_tempstatus=0 ;;
			"Busy") weather_tempstatus=1 ;;
			"Alert") weather_tempstatus=2 ;;
		esac
	;;
	"WEATHER_PARAMETERS.WEATHER_WIND_SPEED")
		weather_wind=$(printf "%3.2f" $value)
	;;
	"WEATHER_PARAMETERS.WEATHER_HUMIDITY")
		weather_hum=$(printf "%3.2f" $value)
	;;
	"WEATHER_PARAMETERS.WEATHER_RAIN_HOUR")
		weather_rain=$(printf "%3.2f" $value)
	;;
	"WEATHER_PARAMETERS.WEATHER_PRESSURE")
		weather_press=$(printf "%4.2f" $value)
	;;
	"WEATHER_PARAMETERS.WEATHER_TEMPERATURE")
		weather_temp=$(printf "%2.2f" $value)
	;;
	*)
	;;
esac

done < <(echo "$indi_msg")

mqtt_props=(
"$rt_connection |"
"$rt_trackstate |"
"$rt_park |"
"$rt_gpio0 |"
"$rt_adc0 |"
"$rt_inttime |"
"$rt_az |"
"$rt_alt |"
"$rt_ra |"
"$rt_dec |"
"$rt_time |"
"$rt_date |"
"$rt_lat |"
"$rt_long |"
"$rt_height |"
"$rt_uptime |"
"$rt_slewrate |"
"$rt_status |"
"$rt_encerraz |"
"$rt_encerralt |"
"$rt_turnsaz |"
"$rt_turnsalt |"
"$rt_mspeedaz |"
"$rt_mspeedalt |"
"$rt_mcurrentaz |"
"$rt_mcurrentalt |"
"$rt_voltage0 |"
"$rt_voltage1 |"
"$rt_voltage2 |"
"$rt_voltage3 |"
"$rt_temp0 |"
"$rt_temp1 |"
"$rt_temp2 |"
"$rt_abort |"
"$weather_override |"
"$weather_windstatus |"
"$weather_humstatus |"
"$weather_rainstatus |"
"$weather_pressstatus |"
"$weather_tempstatus |"
"$weather_wind |"
"$weather_hum |"
"$weather_rain |"
"$weather_press |"
"$weather_temp |"
)

if $parked && ! $unparked; then
	rt_park=1
fi
if ! $parked && $unparked; then
	rt_park=0
fi
if ! $parked && ! $unparked; then
	rt_park=0
fi

if [ $rt_connection == "1" ]; then
	mosquitto_pub --quiet -h $mqtt_host  -p $mqtt_port  -i $mqtt_id  -t $mqtt_topic  -m $(printf "%s" ${mqtt_props[@]})
	else
	mosquitto_pub --quiet -h $mqtt_host  -p $mqtt_port  -i $mqtt_id  -t $mqtt_topic  -m "$rt_connection||||||||||||||||||||||||||||||||||||||||||||||||||"
fi

done





